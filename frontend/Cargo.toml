[package]
name = "frontend"
version = "0.0.0"
authors = ["Charlie Somerville <charlie@charlie.bz>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
bincode = "1.2"
derive_more = "0.99"
gloo-events = "0.1"
js-sys = "0.3"
lazy_static = "1.4"
mixlab-mux = { path = "../mux" }
mixlab-protocol = { path = "../protocol" }
uuid = { version = "0.8", features = ["v4", "wasm-bindgen"] }
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
yew = { version = "0.17", features = ["web_sys"] }
yew-components = "0.2"

web-sys = { version = "0.3", features = [
    "Blob",
    "CanvasRenderingContext2d",
    "CssStyleDeclaration",
    "File",
    "FileList",
    "HtmlCanvasElement",
    "HtmlMediaElement",
    "HtmlVideoElement",
    "InputEvent",
    "Location",
    "MediaSource",
    "MidiAccess",
    "MidiConnectionEvent",
    "MidiInput",
    "MidiInputMap",
    "MidiMessageEvent",
    "MidiPort",
    "Navigator",
    "ReadableStream",
    "SourceBuffer",
    "SourceBufferAppendMode",
    "TimeRanges",
    "WebSocket",
    "WheelEvent",
    "Window",
    "XmlHttpRequest",
    "XmlHttpRequestUpload",
    ] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }
plotters = { version = "0.2.12", default_features = false, features = [
    "line_series"
    ] }

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
